# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import logging
import os
import random
from functools import partial

from PyQt5 import QtCore, QtGui, QtWidgets
import numba
from PyQt5.QtCore import QTimer, QPropertyAnimation
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QGridLayout

from audio import PlayBean, MusicReader, Config
from form import Ui_Form

# 设置日志配置
logging.basicConfig(filename='error.log', level=logging.ERROR)


class Ui_Main(object):
    def __init__(self):

        # A 顺序播放; B 随机播放
        self.switch_status = "A"

        # 全局音量值的备份变量
        self.volume_temp = 30

        # 播放列表单元配置类config的列表容器
        self.music_list = []

        # 播放列表指定的目录地址字符串
        self.music_dir = ""

        # 播放列表的ui初始化
        self.ui_form = Ui_Form(Main_Window=self)

        # 初始化全局单元配置类
        self.config = Config()
        self.config.load_config_file()

        # 初始化音乐总长，播放器实体，以及播放清单
        self.music_length = self.config.music_info.music_length / 1000
        self.bean = PlayBean(volume=self.config.volume, start_time=self.config.music_now)  # 初始化播放模块
        self.update_list()

    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(800, 500)
        Main.setMinimumSize(QtCore.QSize(800, 500))
        Main.setMaximumSize(QtCore.QSize(16000000, 16777215))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)

        icon_main = QtGui.QIcon()
        icon_main.addPixmap(QtGui.QPixmap("resources/head.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Main.setWindowIcon(icon_main)
        Main.setIconSize(QtCore.QSize(50, 50))
        Main.setFont(font)

        Main.setWindowTitle("音乐播放器")
        Main.setAutoFillBackground(False)
        Main.setStyleSheet("background:rgb(20, 20, 20)")

        self.central = QtWidgets.QWidget(Main)
        self.central.setObjectName("central")

        # 封面图像QLabel
        self.diskPlay = QtWidgets.QLabel(self.central)
        self.diskPlay.setGeometry(QtCore.QRect(40, 20, 321, 291))
        self.diskPlay.setStyleSheet("QLabel {\n"
                                    "   background-color: #F0F0F0;\"  # 设置背景颜色\n"
                                    "   color: #000000;\"              # 设置文本颜色\n"
                                    "   border: 2px solid #FFFFFF;\"   # 设置边框，白色\n"
                                    "   border-radius: 10px;\"         # 设置圆角半径\n"
                                    "}")
        self.diskPlay.setText("")
        self.diskPlay.setTextFormat(QtCore.Qt.AutoText)
        self.diskPlay.setPixmap(QtGui.QPixmap("resources/default.png"))

        self.diskPlay.setScaledContents(True)
        self.diskPlay.setObjectName("diskPlay")

        # 歌名 QLabel
        self.songName = QtWidgets.QLabel(self.central)
        self.songName.setGeometry(QtCore.QRect(400, 30, 350, 30))
        self.songName.setMinimumSize(QtCore.QSize(350, 35))
        self.songName.setMaximumSize(QtCore.QSize(9900, 35))
        self.songName.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.songName.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.songName.setStyleSheet("font: 75 15pt \"微软雅黑\";\n"
                                    "color:white;\n"
                                    "")
        self.songName.setObjectName("songName")

        # 歌曲信息 QLabel
        self.songInfo = QtWidgets.QLabel(self.central)
        self.songInfo.setGeometry(QtCore.QRect(400, 70, 350, 231))
        self.songInfo.setMinimumSize(QtCore.QSize(350, 231))
        self.songInfo.setMaximumSize(QtCore.QSize(9900, 231))
        self.songInfo.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.songInfo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.songInfo.setStyleSheet("font: 75 10pt \"微软雅黑\";\n"
                                    "color:white;\n"
                                    "")
        self.songInfo.setObjectName("songInfo")

        # 目录选择器 QPushButton
        self.file = QtWidgets.QPushButton(self.central)
        self.file.setGeometry(QtCore.QRect(750, 0, 45, 45))
        self.file.setMinimumSize(QtCore.QSize(45, 45))
        self.file.setMaximumSize(QtCore.QSize(45, 45))
        self.file.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.file.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.file.setIcon(icon)
        self.file.setIconSize(QtCore.QSize(30, 30))
        self.file.setObjectName("file")

        self.layoutWidget = QtWidgets.QWidget(self.central)
        self.layoutWidget.setGeometry(QtCore.QRect(50, 330, 707, 122))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.runDisplay = QtWidgets.QHBoxLayout()
        self.runDisplay.setObjectName("runDisplay")

        # 左时间：进度时间，实时更新，QLabel
        self.timeNow = QtWidgets.QLabel(self.layoutWidget)
        self.timeNow.setMinimumSize(QtCore.QSize(60, 15))
        self.timeNow.setMaximumSize(QtCore.QSize(60, 15))
        self.timeNow.setStyleSheet("\n"
                                   "font: 75 9pt \"微软雅黑\";\n"
                                   "color:white;\n"
                                   "")
        self.timeNow.setObjectName("timeNow")
        self.timeNow.setText(format_time(self.config.music_now + 1))

        self.runDisplay.addWidget(self.timeNow)

        # 进度条，实时更新，QSlider
        self.runningBar = QtWidgets.QSlider(self.layoutWidget)
        self.runningBar.setMinimumSize(QtCore.QSize(320, 20))
        self.runningBar.setMaximumSize(QtCore.QSize(16777215, 20))
        self.runningBar.setStyleSheet("QSlider::groove:horizontal {\n"
                                      "       border: 0px solid rgb(254, 255, 253);\n"
                                      "       height: 10px;\n"
                                      "       background:rgb(255, 152, 120)rgb(97, 97, 97);\n"
                                      "    \n"
                                      "}\n"
                                      "\n"
                                      "QSlider::handle:horizontal {\n"
                                      "       background:rgb(255, 82, 52);\n"
                                      "       color: rgb(116, 50, 24);\n"
                                      "      height: 8px;\n"
                                      "        width: 18px;\n"
                                      "}")
        self.runningBar.setOrientation(QtCore.Qt.Horizontal)
        self.runningBar.setObjectName("runningBar")
        self.runningBar.setValue(int(self.config.music_now * 100 / self.music_length))

        self.runDisplay.addWidget(self.runningBar)

        # 右时间：总时长，切换更新 QLabel
        self.timeAll = QtWidgets.QLabel(self.layoutWidget)
        self.timeAll.setMinimumSize(QtCore.QSize(60, 15))
        self.timeAll.setMaximumSize(QtCore.QSize(60, 15))
        self.timeAll.setStyleSheet("\n"
                                   "font: 75 9pt \"微软雅黑\";\n"
                                   "color:white;\n"
                                   "")
        self.timeAll.setObjectName("timeAll")

        self.runDisplay.addWidget(self.timeAll)
        self.verticalLayout.addLayout(self.runDisplay)

        self.playDisplay = QtWidgets.QHBoxLayout()
        self.playDisplay.setObjectName("playDisplay")

        # 上一首， QPushButton
        self.left = QtWidgets.QPushButton(self.layoutWidget)
        self.left.setMinimumSize(QtCore.QSize(45, 45))
        self.left.setMaximumSize(QtCore.QSize(45, 45))
        self.left.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.left.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("resources/left.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.left.setIcon(icon1)
        self.left.setIconSize(QtCore.QSize(45, 45))
        self.left.setObjectName("left")

        self.playDisplay.addWidget(self.left)

        # 播放按钮 QPushuButton
        self.play = QtWidgets.QPushButton(self.layoutWidget)
        self.play.setMinimumSize(QtCore.QSize(90, 90))
        self.play.setMaximumSize(QtCore.QSize(90, 90))
        self.play.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.play.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("resources/play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.play.setIcon(icon2)
        self.play.setIconSize(QtCore.QSize(75, 75))
        self.play.setCheckable(False)
        self.play.setAutoRepeat(False)
        self.play.setAutoDefault(False)
        self.play.setObjectName("play")

        self.playDisplay.addWidget(self.play)

        # 下一首 QPushButton
        self.right = QtWidgets.QPushButton(self.layoutWidget)
        self.right.setMinimumSize(QtCore.QSize(45, 45))
        self.right.setMaximumSize(QtCore.QSize(45, 45))
        self.right.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.right.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("resources/right.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.right.setIcon(icon3)
        self.right.setIconSize(QtCore.QSize(30, 30))
        self.right.setAutoExclusive(False)
        self.right.setObjectName("right")

        self.playDisplay.addWidget(self.right)

        # 播放清单ui跳转， QPushButton
        self.list = QtWidgets.QPushButton(self.layoutWidget)
        self.list.setMinimumSize(QtCore.QSize(45, 45))
        self.list.setMaximumSize(QtCore.QSize(45, 45))
        self.list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.list.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("resources/list.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.list.setIcon(icon4)
        self.list.setIconSize(QtCore.QSize(30, 30))
        self.list.setObjectName("list")

        # 音量键切换，QPushButton
        self.sound = QtWidgets.QPushButton(self.central)
        self.sound.setGeometry(QtCore.QRect(765, 292, 30, 30))
        self.sound.setMinimumSize(QtCore.QSize(30, 30))
        self.sound.setMaximumSize(QtCore.QSize(45, 45))
        self.sound.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.sound.setText("")

        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("resources/on.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sound.setIcon(icon5)
        self.sound.setIconSize(QtCore.QSize(20, 20))

        self.sound.setObjectName("sound")

        self.playDisplay.addWidget(self.list)

        # 播放模式选择器 QComboBox
        self.comboBox = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox.setMinimumSize(QtCore.QSize(130, 35))
        self.comboBox.setMaximumSize(QtCore.QSize(130, 35))
        self.comboBox.setObjectName("comboBox")

        # 添加两个项
        self.comboBox.addItem("顺序播放")
        self.comboBox.addItem("随机播放")
        self.comboBox.addItem("单曲循环")

        self.comboBox.setStyleSheet("QComboBox {"
                                    "    color: white;"  # 文字颜色
                                    "    font: 75 10pt \"微软雅黑\";"
                                    "}")

        self.playDisplay.addWidget(self.comboBox)
        self.verticalLayout.addLayout(self.playDisplay)

        # 音量条 QSlider
        self.audioBar = QtWidgets.QSlider(self.central)
        self.audioBar.setGeometry(QtCore.QRect(770, 330, 20, 121))
        self.audioBar.setMinimumSize(QtCore.QSize(20, 121))
        self.audioBar.setMaximumSize(QtCore.QSize(20, 121))
        self.audioBar.setStyleSheet("QSlider::groove:vertical {\n"
                                    "       border: 0px solid rgb(254, 255, 253);\n"
                                    "width: 10px;\n"
                                    "       height: 120px;\n"
                                    "       background:rgb(255, 152, 120)rgb(97, 97, 97);\n"
                                    "    \n"
                                    "}\n"
                                    "\n"
                                    "QSlider::handle:vertical {\n"
                                    "       background:rgb(255, 82, 52);\n"
                                    "       color: rgb(116, 50, 24);\n"
                                    "      height: 10px;\n"
                                    "        width: 10px;\n"
                                    "}")
        self.audioBar.setOrientation(QtCore.Qt.Vertical)
        self.audioBar.setObjectName("audioBar")
        self.audioBar.setValue(int(self.config.volume))

        Main.setCentralWidget(self.central)
        self.statusbar = QtWidgets.QStatusBar(Main)
        self.statusbar.setObjectName("statusbar")
        Main.setStatusBar(self.statusbar)

        self.retranslateUi(Main)
        self.play.clicked.connect(self.play.update)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Main)

        self.songName.setText("暂无媒体 - 空白" + "       ")

        self.songName_timer = QTimer(self)
        self.songName_timer.start(900)  # 设置定时器间隔，单位为毫秒

        self.running_timer = QTimer(self)
        self.running_timer.start(100)  # 设置定时器间隔，单位为毫秒

        self.play.clicked.connect(self.play_slot)

        self.runningBar.valueChanged.connect(self.update_music_now)
        self.runningBar.sliderReleased.connect(self.music_play)

        self.audioBar.valueChanged.connect(self.update_volume_now)

        self.sound.clicked.connect(self.switch_sound)

        self.songName_timer.timeout.connect(self.scroll_title)
        self.running_timer.timeout.connect(self.update_running)

        self.list.clicked.connect(self.form_show)
        self.file.clicked.connect(self.show_directory_dialog)

        self.right.clicked.connect(partial(self.switch_music, value=1))
        self.left.clicked.connect(partial(self.switch_music, value=-1))

        self.comboBox.currentIndexChanged.connect(self.combo_change)

        self.update_ui()
        # 初始化第一首音乐的ui

    def play_slot(self):
        # 暂停
        if self.bean.is_busy() is True:
            self.music_pause()
        # 播放
        else:
            self.music_play()

    def music_play(self):
        """
        播放音乐的方法。
        如果配置了音乐 URL，将更新用户界面，播放音乐，并启动歌曲名称定时器。
        """

        if self.config.music_url:
            self.update_ui()
            self.bean.play_music(file_path=self.config.music_url,
                                 start_time=self.bean.start_time,
                                 volume=self.config.volume)

            self.songName_timer.start()
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap("resources/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.play.setIcon(icon2)
            self.play.setIconSize(QtCore.QSize(75, 75))

    def music_pause(self):
        """
        暂停音乐的方法。
        如果音乐正在播放，则暂停音乐，并停止歌曲名称定时器。
        """
        if self.bean.is_busy():
            self.bean.pause_music()

        self.songName_timer.stop()
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("resources/play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.play.setIcon(icon2)
        self.play.setIconSize(QtCore.QSize(75, 75))

    def music_stop(self):
        """
        停止音乐的方法。
        如果音乐正在播放，则停止音乐，保存配置，并停止歌曲名称定时器。
        """
        if self.bean.is_busy():
            self.bean.stop_music()

        self.config.music_now = 0
        self.songName_timer.stop()

        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("resources/play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.play.setIcon(icon2)
        self.play.setIconSize(QtCore.QSize(75, 75))

    def update_music_now(self, value):
        """
        根据进度条值计算更新音乐播放位置
        :param value 进度条传递过来的值
        """
        self.config.music_now = value / 100 * self.music_length
        self.timeNow.setText(format_time(self.config.music_now + 1))
        self.bean.set_start(self.config.music_now)

    def update_volume_now(self, value):
        """
        根据进度条值计算更新音乐播放位置
        :param value: 音量条传递过来的值
        """
        self.config.volume = value
        self.bean.set_volume(value)
        self.change_sound_icon()

    def switch_sound(self):
        """
        音量更新器，实时更新当前播放文件的音量大小，并根据情况修改静音时的音量键图标
        """

        # 有声
        if self.config.volume - 0 > 0.0001:
            self.volume_temp = self.config.volume
            self.config.volume = 0
            self.bean.set_volume(self.config.volume)
            self.change_sound_icon()
            self.audioBar.setValue(0)
        else:
            self.config.volume = self.volume_temp
            self.bean.set_volume(self.config.volume)
            self.change_sound_icon()
            self.audioBar.setValue(int(self.config.volume))

    def change_sound_icon(self):
        """
        静音切换器，根据音量键按下切换静音、非静音模式，静音前会备份全局音量值
        """

        # 有声
        if self.config.volume - 0 > 0.0001:
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap("resources/on.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.sound.setIcon(icon5)
            self.sound.setIconSize(QtCore.QSize(20, 20))

        # 无声
        else:
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap("resources/off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.sound.setIcon(icon5)
            self.sound.setIconSize(QtCore.QSize(20, 20))

    def update_ui(self):
        """
        页面更新器，更新该页面的封面、标题、音乐简介、和音乐总时长
        """

        # 更新封面
        if self.config.music_info.album_cover is None:
            self.diskPlay.setPixmap(QtGui.QPixmap("resources/default.png"))
        else:
            self.diskPlay.setPixmap(bit_to_map(self.config.music_info.album_cover))

        # 更新标题
        if self.config.music_info.title is None:
            self.songName.setText("暂无媒体 - 空白" + "       ")
        else:
            self.songName.setText(self.config.music_info.title + "        ")

        # 更新总时间
        self.music_length = self.config.music_info.music_length / 1000
        self.timeAll.setText(format_time(self.music_length))

        # 更新简介
        self.songInfo.setText(self.config.music_info.get_info_str())

    def scroll_title(self):
        """
        标题滚动器，根据计时器实时修改标题文字排版，达成假滚动动态效果
        """
        current_text = self.songName.text()
        scrolled_text = current_text[1:] + current_text[0]
        self.songName.setText(scrolled_text)

    def update_running(self):
        """
        running更新器，实时更新当前显示时间和进度条位置，并在结束时切换音乐
        """
        self.config.music_now = self.bean.start_time
        self.timeNow.setText(format_time(self.config.music_now + 1))
        self.runningBar.setValue(int(self.config.music_now * 100 / self.music_length))

        if abs(self.music_length - self.config.music_now) <= 0.48:
            self.music_stop()
            self.switch_music()

    def switch_music(self, value: int = 1):
        """
        音乐切换器，根据combobox选择情况调用相应参数进行切换
        """
        if self.music_list and self.config:
            self.music_stop()
            r_num = 1
            if self.switch_status == "B":
                # 禁止出现0随机
                non_zero_range = (list(range(-len(self.music_list), 0))
                                  + list(range(1, len(self.music_list) + 1)))
                r_num = random.choice(non_zero_range)
            elif self.switch_status == "C":
                r_num = 0

            self.play_next(value=r_num)
            self.update_ui()
            self.music_play()

    def play_next(self, value: int = 1):
        """
        音乐切换函数，根据value值或者随机值按照环形遍历原则切换
        """
        if self.music_list and self.config:
            self.bean.start_time = 0
            index = 0
            for i, element in enumerate(self.music_list):
                if element.music_url == self.config.music_url:
                    index = i
                    break
            # 计算环形遍历后的索引
            total = len(self.music_list)
            next_index = (index + value) % total
            self.set_config(self.music_list[next_index])

    def form_show(self):
        """
        打开播放清单的ui
        """
        if not self.music_list:
            self.ui_form.show()
        else:
            self.ui_form = Ui_Form(Main_Window=self, music_list=self.music_list)
            self.ui_form.show()

    def show_directory_dialog(self):
        """
        打开目录选择器
        """
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.ShowDirsOnly  # 只显示目录
        self.music_dir = QtWidgets.QFileDialog.getExistingDirectory(self, "选择播放目录", "", options=options)
        if self.music_dir:
            self.config.music_dir = self.music_dir
            self.update_list()
            self.update_ui()

    def update_list(self):
        """
        更新播放清单数据
        """
        if self.config.music_dir:
            self.scan_music(self.config.music_dir)
            self.music_dir = self.config.music_dir
            if not self.music_list:
                self.config = self.music_list[0]

        # TODO
        else:
            logging.error(f"该目录找不到音乐文件: {self.config.music_dir} ")

    def scan_music(self, directory):
        """
        扫描指定目录下的所有音乐文件，转为单元配置类存储进全局容器
        """
        music_formats = ['.mp3']  # 主流音乐格式列表，可以根据实际需要扩展 能力有限暂时只支持mp3格式
        try:
            # 重置清单，以防止混杂交错
            self.music_list = []

            for root, dirs, files in os.walk(directory):
                for file in files:
                    if any(file.lower().endswith(format) for format in music_formats):

                        # 规范化地址，防止左右斜杠符混用
                        url_temp = os.path.normpath(os.path.join(root, file))

                        # 检查是否已经存在相同的 music_url，若存在则不加入
                        if url_temp not in [item.music_url for item in self.music_list]:
                            conf_temp = Config(music_url=url_temp)
                            self.music_list.append(conf_temp)

        except Exception as e:
            logging.error(f"扫描音乐文件时发生错误: {e}")

    def combo_change(self, index):
        """
        根据ComboBox选择的项设置全局变量 self.switch_status
        """
        if index == 0:
            self.switch_status = "A"
        elif index == 1:
            self.switch_status = "B"
        elif index == 2:
            self.switch_status = "C"

    def closeEvent(self, event):
        """
        主窗口关闭事件
        :param event:
        """
        self.config.music_dir = self.music_dir
        self.config.save_config_file()

        if self.bean.is_busy():
            self.bean.stop_music()
        if self.ui_form.isVisible():
            self.ui_form.close()
        event.accept()

    # -------------决定需要废弃的函数（暂不能删除）-------------
    def retranslateUi(self, Main):
        """
        再翻译功能
        """
        _translate = QtCore.QCoreApplication.translate
        self.songName.setText(_translate("Main", "暂无媒体 - 空白"))
        self.songInfo.setText(_translate("Main", "<空>"))
        self.timeNow.setText(_translate("Main", "00:00"))
        self.timeAll.setText(_translate("Main", "00:00"))

    def set_config(self, config: Config):
        """ 获取全局单元配置 """
        self.config = config

    def get_dir(self):
        """ 获取全局播放清单 """
        return self.music_dir


# -------------外部工具-------------
def bit_to_map(binary_data):
    """ 二进制字节流变为图像格式 """
    image = QImage.fromData(binary_data)
    pixmap = QPixmap.fromImage(image)
    return pixmap


def format_time(seconds):
    """ 秒数变为00：00 格式字符串 """
    minutes, seconds = divmod(seconds - 1, 60)
    return f"{int(minutes):02d}:{int(seconds):02d}"
